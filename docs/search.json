[
  {
    "objectID": "tools-review/cursor.html",
    "href": "tools-review/cursor.html",
    "title": "Cursor IDE Reference Guide",
    "section": "",
    "text": "A technical reference for Cursor’s AI-assisted development features\n\n\nCursor is a fork of VS Code that integrates AI assistance throughout the development workflow. It indexes entire codebases to provide context-aware suggestions, completions, and edits.\nIt is worth trying because it is a full IDE that gives a great diff experience on AI changes, and is very aggressive with the AI assistance.\n\n\n\n\n\n\nSpecial Offer for Readers\n\n\n\nGet 30% off my Context Engineering course with code ISAAC\nEnroll Now on Maven\n\n\n\n\n\n\n\nCursor’s completions use project-wide context rather than just the current file and are very aggressive, which is good in some situations and annoying in others.\n\n\n\n\n\n\nHelpful Use Case\n\n\n\nI was doing an OSS PR to add type hints to a new web development framework called air (very repetitive task). These needed to be matched up to a HTML reference documentation, and agents kept leaving off or added tags. Cursor’s tab comletion let me copy/paste from reference docs then hit tab for it to tab complete and modify to python syntax very quickly. It got the pattern after the first couple and let me get through it all in very little time.\n\n\n\n\n\n\n\n\nUnhelpful Use Case\n\n\n\nI was working on creating examples for a workshop I was teaching on FastHTML Syntax and Project Organization. The tab completion was extremely annoying, because it was project wide it kept trying to autocomplete and change my code to what I did somewhere else. I felt like I was fighting the tab completion constantly and having to keep telling it to go away A LOT because I had a very specific thing in mind I wanted to do.\n\n\n\n\n\nContext-aware chat that understands project structure. This is pretty helpful with being able to easily reference lots of things with the @ syntax for files. If you have code highlighted when you engage it that will be included in context specifically, and open files will also be in context for you.\n\n![TIP] I find it really helpful to dump lots of things in a ref folder then @ like everything useful as I go. This can be tutorials I found online, docs, etc. I can @ the URL directly, but the ref folder serves as an aggregator for me that’s a bit easier to keep top of mind and curate as needed than the cursor docs feature IMO.\n\nThe Agent gives many options and you get really nice diffs that you can individually review, or accept all, and you can restore back to checkpoints if you accepted changes that you find don’t work well after testing.\n\n\n\nEdit code in place with AI assistance Cmd+K. This lets you target specific pieces of code to edit. This is extremely helpful for limiting the scope of AI, especially when it’s trying to do too much or you know exactly where the change should happen.\nI often use this to quickly ask it to write a doc string for documentation, or to do things like refactor a hairy logic stuck iside loops or conditionals into functions.\n\n\n\nIn your terminal you can select Cmd+K to have an AI assist that sees that terminals history. This is super helpful for lots of things, like telling you how to run things, git commands you’ve forgotten, telling it to do some curl command you don’t remember all the flags you need, etc.\nThe really nice thing about Cmd+K is it’s very controlled, so it puts the command in your terminal but YOU must run it. This makes it nice because I can ask it to help with even fairly risk things because it won’t be running anything on it’s own.\n\n\n\nCursor Rules are extremely helpful and there’s 4 modes:\n\n\n\nCursor Rules Options\n\n\n\nAlways Apply - Core rules that should never be violated\nApply Manually - Rules you trigger when needed. If you’re really bad at thinking about context, and you’re not going to put a lot of effort in then don’t use this.\nApply Intelligently - This is a great thing to use and provide a good description for the agent to know when to use it.\nApply to Specific Files - File-type or path-specific rules. This can be nice, but you’re liable to set it to a path, restructure something, then forget and this rule will be acidentally deprecated. This is useful in a decently mature code base, or with very general paths like src or docs directory that are not likely to change.\n\n\n\n\n\n\nBackground Agents: These are great to bring some of what you do in cursor for easier tasks to run in parallel\nSlack/Github Integration: A nice features to do additional tasks and ask cursor to work on things from Slack or from a github repo. I didn’t find it as useful for actual coding things, as I found going to the IDE, adding additional context and thinking about the task instructions for formulate payed dividends. But for writing tasks it was a great easy starting point!"
  },
  {
    "objectID": "tools-review/cursor.html#overview",
    "href": "tools-review/cursor.html#overview",
    "title": "Cursor IDE Reference Guide",
    "section": "",
    "text": "Cursor is a fork of VS Code that integrates AI assistance throughout the development workflow. It indexes entire codebases to provide context-aware suggestions, completions, and edits.\nIt is worth trying because it is a full IDE that gives a great diff experience on AI changes, and is very aggressive with the AI assistance.\n\n\n\n\n\n\nSpecial Offer for Readers\n\n\n\nGet 30% off my Context Engineering course with code ISAAC\nEnroll Now on Maven"
  },
  {
    "objectID": "tools-review/cursor.html#top-ide-features",
    "href": "tools-review/cursor.html#top-ide-features",
    "title": "Cursor IDE Reference Guide",
    "section": "",
    "text": "Cursor’s completions use project-wide context rather than just the current file and are very aggressive, which is good in some situations and annoying in others.\n\n\n\n\n\n\nHelpful Use Case\n\n\n\nI was doing an OSS PR to add type hints to a new web development framework called air (very repetitive task). These needed to be matched up to a HTML reference documentation, and agents kept leaving off or added tags. Cursor’s tab comletion let me copy/paste from reference docs then hit tab for it to tab complete and modify to python syntax very quickly. It got the pattern after the first couple and let me get through it all in very little time.\n\n\n\n\n\n\n\n\nUnhelpful Use Case\n\n\n\nI was working on creating examples for a workshop I was teaching on FastHTML Syntax and Project Organization. The tab completion was extremely annoying, because it was project wide it kept trying to autocomplete and change my code to what I did somewhere else. I felt like I was fighting the tab completion constantly and having to keep telling it to go away A LOT because I had a very specific thing in mind I wanted to do.\n\n\n\n\n\nContext-aware chat that understands project structure. This is pretty helpful with being able to easily reference lots of things with the @ syntax for files. If you have code highlighted when you engage it that will be included in context specifically, and open files will also be in context for you.\n\n![TIP] I find it really helpful to dump lots of things in a ref folder then @ like everything useful as I go. This can be tutorials I found online, docs, etc. I can @ the URL directly, but the ref folder serves as an aggregator for me that’s a bit easier to keep top of mind and curate as needed than the cursor docs feature IMO.\n\nThe Agent gives many options and you get really nice diffs that you can individually review, or accept all, and you can restore back to checkpoints if you accepted changes that you find don’t work well after testing.\n\n\n\nEdit code in place with AI assistance Cmd+K. This lets you target specific pieces of code to edit. This is extremely helpful for limiting the scope of AI, especially when it’s trying to do too much or you know exactly where the change should happen.\nI often use this to quickly ask it to write a doc string for documentation, or to do things like refactor a hairy logic stuck iside loops or conditionals into functions.\n\n\n\nIn your terminal you can select Cmd+K to have an AI assist that sees that terminals history. This is super helpful for lots of things, like telling you how to run things, git commands you’ve forgotten, telling it to do some curl command you don’t remember all the flags you need, etc.\nThe really nice thing about Cmd+K is it’s very controlled, so it puts the command in your terminal but YOU must run it. This makes it nice because I can ask it to help with even fairly risk things because it won’t be running anything on it’s own.\n\n\n\nCursor Rules are extremely helpful and there’s 4 modes:\n\n\n\nCursor Rules Options\n\n\n\nAlways Apply - Core rules that should never be violated\nApply Manually - Rules you trigger when needed. If you’re really bad at thinking about context, and you’re not going to put a lot of effort in then don’t use this.\nApply Intelligently - This is a great thing to use and provide a good description for the agent to know when to use it.\nApply to Specific Files - File-type or path-specific rules. This can be nice, but you’re liable to set it to a path, restructure something, then forget and this rule will be acidentally deprecated. This is useful in a decently mature code base, or with very general paths like src or docs directory that are not likely to change."
  },
  {
    "objectID": "tools-review/cursor.html#additional-features",
    "href": "tools-review/cursor.html#additional-features",
    "title": "Cursor IDE Reference Guide",
    "section": "",
    "text": "Background Agents: These are great to bring some of what you do in cursor for easier tasks to run in parallel\nSlack/Github Integration: A nice features to do additional tasks and ask cursor to work on things from Slack or from a github repo. I didn’t find it as useful for actual coding things, as I found going to the IDE, adding additional context and thinking about the task instructions for formulate payed dividends. But for writing tasks it was a great easy starting point!"
  },
  {
    "objectID": "tool-reviews.html",
    "href": "tool-reviews.html",
    "title": "Tool Reviews",
    "section": "",
    "text": "ABCD\n\n\n\n\n\n\n   \n    \n    \n      Order By\n      Default\n      \n        Date - Oldest\n      \n      \n        Date - Newest\n      \n      \n        Title\n      \n      \n        Categories\n      \n    \n  \n    \n      \n      \n    \n\n\n\n\n\n\nDate\n\n\n\nTitle\n\n\n\nCategories\n\n\n\n\n\n\n\n\nJul 22, 2025\n\n\nCursor IDE Reference Guide\n\n\nIDE, Background agent\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Context Engineering for Coding",
    "section": "",
    "text": "I’ve been deep in the AI coding tools space, testing everything from Cursor to Windsurf to see what actually delivers. Just honest reviews and techniques based on real coding sessions.\n\n\n\n\nUnbiased Reviews: I pay for these tools and try them myself\nReal Code Examples: Hear exactly what tasks I used them\nPractical Insights: What works, what doesn’t, and when to use each tool\nGuides: How to use each tool to its full potential, both universal information and tool specific information\nCondensed Information: I’ve condensed the information to the most useful so you don’t need to spend hours on every tool to know what’s worth your time to try for yourself.\n\n\n\n\n\n\nI teach a course on Context Engineering for Coding - the art of getting AI to write the code you actually want. Learn the patterns that 10x your productivity with any AI coding tool.\nThis is free content I provide, and if you want even more value, that’s even more organized, and taught by me, you can get it here:\n\n\n\n\n\n\nSpecial Offer for Readers\n\n\n\nGet 30% off my Context Engineering course with code ISAAC\nEnroll Now on Maven\n\n\nAlong with the course you’ll get access to a private Discord server where you can ask questions, share your own tips, and get help from me and other students. Once the course started, I will read and respond to all questions in the Discord server."
  },
  {
    "objectID": "index.html#what-youll-find-here",
    "href": "index.html#what-youll-find-here",
    "title": "Context Engineering for Coding",
    "section": "",
    "text": "Unbiased Reviews: I pay for these tools and try them myself\nReal Code Examples: Hear exactly what tasks I used them\nPractical Insights: What works, what doesn’t, and when to use each tool\nGuides: How to use each tool to its full potential, both universal information and tool specific information\nCondensed Information: I’ve condensed the information to the most useful so you don’t need to spend hours on every tool to know what’s worth your time to try for yourself."
  },
  {
    "objectID": "index.html#want-even-more",
    "href": "index.html#want-even-more",
    "title": "Context Engineering for Coding",
    "section": "",
    "text": "I teach a course on Context Engineering for Coding - the art of getting AI to write the code you actually want. Learn the patterns that 10x your productivity with any AI coding tool.\nThis is free content I provide, and if you want even more value, that’s even more organized, and taught by me, you can get it here:\n\n\n\n\n\n\nSpecial Offer for Readers\n\n\n\nGet 30% off my Context Engineering course with code ISAAC\nEnroll Now on Maven\n\n\nAlong with the course you’ll get access to a private Discord server where you can ask questions, share your own tips, and get help from me and other students. Once the course started, I will read and respond to all questions in the Discord server."
  }
]